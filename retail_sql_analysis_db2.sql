-- ========================================
-- Retail SQL Analysis – Clean Portfolio Version
-- Author: Faiq Bokhari
-- Description: SQL insights from a multi-entity ER-modeled retail database (IBM Db2)
-- ========================================

CONNECT TO SE3DB3;

-- ========================================
-- Customer Behavior and Demographics
-- ========================================

-- Customers aged 18+ who placed an order on July 22, 2020
SELECT 
    Customer.FIRSTNAME, 
    Customer.LASTNAME, 
    Customer.DATEOFBIRTH, 
    Order.DATE
FROM Customer
INNER JOIN Order ON 
    Customer.FIRSTNAME = Order.FIRSTNAME 
    AND Customer.LASTNAME = Order.LASTNAME 
    AND Customer.DATEOFBIRTH = Order.DATEOFBIRTH
WHERE 
    DATE(Customer.DATEOFBIRTH) <= (CURRENT DATE - 18 YEARS)
    AND Order.DATE = '07/22/2020';

-- Distinct product categories purchased by customers aged 20–35
SELECT DISTINCT 
    BELONGSTO.PRODUCTID, 
    PRODUCTCATEGORY.NAME
FROM PRODUCTCATEGORY
INNER JOIN BELONGSTO ON PRODUCTCATEGORY.PRODUCTCATEGORYID = BELONGSTO.PRODUCTCATEGORYID
INNER JOIN ORDERCONTAINS ON ORDERCONTAINS.PRODUCTID = BELONGSTO.PRODUCTID
INNER JOIN ORDER ON ORDERCONTAINS.ORDERID = ORDER.ORDERID
INNER JOIN CUSTOMER ON 
    CUSTOMER.FIRSTNAME = ORDER.FIRSTNAME 
    AND CUSTOMER.LASTNAME = ORDER.LASTNAME 
    AND CUSTOMER.DATEOFBIRTH = ORDER.DATEOFBIRTH
WHERE 
    DATE(CUSTOMER.DATEOFBIRTH) BETWEEN (CURRENT DATE - 35 YEARS) AND (CURRENT DATE - 20 YEARS);

-- Most engaged reviewers (top 4 by review count)
SELECT 
    WRITEREVIEW.FIRSTNAME, 
    WRITEREVIEW.LASTNAME, 
    WRITEREVIEW.DATEOFBIRTH, 
    PERSON.CITY, 
    PERSON.COUNTRY
FROM WRITEREVIEW
INNER JOIN PERSON ON 
    WRITEREVIEW.FIRSTNAME = PERSON.FIRSTNAME 
    AND WRITEREVIEW.LASTNAME = PERSON.LASTNAME 
    AND WRITEREVIEW.DATEOFBIRTH = PERSON.DATEOFBIRTH
GROUP BY 
    WRITEREVIEW.FIRSTNAME, 
    WRITEREVIEW.LASTNAME, 
    WRITEREVIEW.DATEOFBIRTH, 
    PERSON.CITY, 
    PERSON.COUNTRY
ORDER BY COUNT(*) DESC
FETCH FIRST 4 ROWS ONLY;

-- ========================================
-- Shipments and Delivery Optimization
-- ========================================

-- Shipments that include more than one order
SELECT HASSHIPMENT.TRACKINGNUMBER
FROM HASSHIPMENT
INNER JOIN ORDER ON HASSHIPMENT.ORDERID = ORDER.ORDERID
GROUP BY HASSHIPMENT.TRACKINGNUMBER
HAVING COUNT(*) > 1;

-- Multi-order shipments delivered to Toronto (Postal Code starts with 'M')
SELECT HASSHIPMENT.TRACKINGNUMBER
FROM HASSHIPMENT
INNER JOIN ORDER ON HASSHIPMENT.ORDERID = ORDER.ORDERID
INNER JOIN PERSON ON 
    ORDER.FIRSTNAME = PERSON.FIRSTNAME 
    AND ORDER.LASTNAME = PERSON.LASTNAME 
    AND ORDER.DATEOFBIRTH = PERSON.DATEOFBIRTH
WHERE PERSON.POSTALCODE LIKE 'M%'
GROUP BY HASSHIPMENT.TRACKINGNUMBER
HAVING COUNT(*) > 1;

-- ========================================
-- Product Inventory and Sales
-- ========================================

-- Products assigned to exactly one category
SELECT BELONGSTO.PRODUCTID
FROM BELONGSTO
GROUP BY BELONGSTO.PRODUCTID
HAVING COUNT(*) = 1;

-- Products unique to their brand
SELECT 
    PRODUCT.PRODUCTID, 
    PRODUCT.NAME, 
    PRODUCT.BRAND
FROM PRODUCT
GROUP BY 
    PRODUCT.PRODUCTID, 
    PRODUCT.NAME, 
    PRODUCT.BRAND
HAVING COUNT(BRAND) = 1;

-- Orders with revenue greater than or equal to $596
SELECT 
    ORDER.ORDERID, 
    (ORDERCONTAINS.QUANTITY * PRODUCT.PRICE) AS SALE
FROM ORDER
INNER JOIN ORDERCONTAINS ON ORDER.ORDERID = ORDERCONTAINS.ORDERID
INNER JOIN PRODUCT ON ORDERCONTAINS.PRODUCTID = PRODUCT.PRODUCTID
WHERE (ORDERCONTAINS.QUANTITY * PRODUCT.PRICE) >= 596
ORDER BY SALE DESC;

-- ========================================
-- Store-Level Revenue Analysis
-- ========================================

-- Store revenue during July 2020 (in ascending order)
SELECT 
    STORE.STOREID, 
    STORE.DESCRIPTION, 
    STORE.STARTDATE, 
    SUM(PRODUCT.PRICE * ORDERCONTAINS.QUANTITY) AS REVENUE
FROM STORE
INNER JOIN PRODUCT ON STORE.STOREID = PRODUCT.STOREID
INNER JOIN ORDERCONTAINS ON PRODUCT.PRODUCTID = ORDERCONTAINS.PRODUCTID
INNER JOIN ORDER ON ORDERCONTAINS.ORDERID = ORDER.ORDERID
WHERE ORDER.DATE BETWEEN '2020-07-01' AND '2020-07-31'
GROUP BY 
    STORE.STOREID, 
    STORE.DESCRIPTION, 
    STORE.STARTDATE
ORDER BY REVENUE ASC;

-- ========================================
-- Product Promotion and Performance Gaps
-- ========================================

-- Products never purchased by any customer
SELECT PRODUCT.PRODUCTID
FROM PRODUCT
LEFT JOIN ORDERCONTAINS ON PRODUCT.PRODUCTID = ORDERCONTAINS.PRODUCTID
WHERE ORDERCONTAINS.PRODUCTID IS NULL;

-- Unpurchased products that were promoted
SELECT PRODUCT.PRODUCTID
FROM PRODUCT
LEFT JOIN ORDERCONTAINS ON PRODUCT.PRODUCTID = ORDERCONTAINS.PRODUCTID
INNER JOIN PROMOTION ON PRODUCT.PRODUCTID = PROMOTION.PRODUCTID
WHERE ORDERCONTAINS.PRODUCTID IS NULL;

-- ========================================
-- Warranty Coverage Insights
-- ========================================

-- Categories where all products have warranties
SELECT 
    PRODUCTCATEGORY.PRODUCTCATEGORYID, 
    PRODUCTCATEGORY.NAME
FROM PRODUCTCATEGORY
INNER JOIN BELONGSTO ON PRODUCTCATEGORY.PRODUCTCATEGORYID = BELONGSTO.PRODUCTCATEGORYID
INNER JOIN PRODUCT ON BELONGSTO.PRODUCTID = PRODUCT.PRODUCTID
LEFT JOIN HASWARRANTY ON PRODUCT.PRODUCTID = HASWARRANTY.PRODUCTID
GROUP BY 
    PRODUCTCATEGORY.PRODUCTCATEGORYID, 
    PRODUCTCATEGORY.NAME
HAVING COUNT(HASWARRANTY.WARRANTYID) = COUNT(PRODUCT.PRODUCTID);

